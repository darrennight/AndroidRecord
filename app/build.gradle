apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.jakewharton.butterknife'
apply plugin: 'dagger.hilt.android.plugin'


//plugins {
//    id 'com.android.application'
//    id 'kotlin-android'
//    id 'kotlin-android-extensions'
//    id 'kotlin-kapt'
//}

android {
    compileSdkVersion 29
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.hao.androidrecord"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        renderscriptTargetApi 25
        renderscriptSupportModeEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
//    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.2'
    implementation 'androidx.core:core-ktx:1.3.2'
    //协程和ktx jatpack
    //ViewModelScope
    //为应用中的每个 ViewModel 定义了 ViewModelScope。如果 ViewModel 已清除，则在此范围内启动的协程都会自动取消
    /*
     class MyViewModel: ViewModel() {
    init {
        viewModelScope.launch {
            // Coroutine that will be canceled when the ViewModel is cleared.
        }
    }
}
     */
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'
    //LifecycleScope
    //为每个 Lifecycle 对象定义了 LifecycleScope。在此范围内启动的协程会在 Lifecycle 被销毁时取消。
    // 您可以通过 lifecycle.coroutineScope 或 lifecycleOwner.lifecycleScope 属性访问 Lifecycle 的 CoroutineScope。
    /*
    class MyFragment: Fragment() {
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        viewLifecycleOwner.lifecycleScope.launch {
            val params = TextViewCompat.getTextMetricsParams(textView)
            val precomputedText = withContext(Dispatchers.Default) {
                PrecomputedTextCompat.create(longTextContent, params)
            }
            TextViewCompat.setPrecomputedText(textView, precomputedText)
        }
    }
}
    * */
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.2.0'
    //liveData
    /*
     val user: LiveData<Result> = liveData {
    emit(Result.loading())
    try {
        emit(Result.success(fetchUser()))
    } catch(ioException: Exception) {
        emit(Result.error(ioException))
    }
}
     */
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
//    implementation 'androidx.lifecycle:lifecycle-viewmodel-savedstate:2.3.0-beta01'
    api "androidx.activity:activity-ktx:1.1.0"
    api "androidx.fragment:fragment-ktx:1.2.5"

    implementation "com.google.dagger:hilt-android:2.28-alpha"
    kapt "com.google.dagger:hilt-android-compiler:2.28-alpha"

    def paging_version = "3.0.0-alpha12"

    implementation "androidx.paging:paging-runtime:$paging_version"
    implementation "androidx.paging:paging-compose:1.0.0-alpha05"


    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'



    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    implementation 'io.reactivex.rxjava3:rxjava:3.0.4'

    implementation 'com.trello.rxlifecycle4:rxlifecycle:4.0.0'
// If you want to bind to Android-specific lifecycles
    implementation 'com.trello.rxlifecycle4:rxlifecycle-android:4.0.0'
// If you want pre-written Activities and Fragments you can subclass as providers
    implementation 'com.trello.rxlifecycle4:rxlifecycle-components:4.0.0'
// If you want pre-written support preference Fragments you can subclass as providers
    implementation 'com.trello.rxlifecycle4:rxlifecycle-components-preference:4.0.0'
// If you want to use Android Lifecycle for providers
    implementation 'com.trello.rxlifecycle4:rxlifecycle-android-lifecycle:4.0.0'
// If you want to use Kotlin syntax
    implementation 'com.trello.rxlifecycle4:rxlifecycle-kotlin:4.0.0'
// If you want to use Kotlin syntax with Android Lifecycle
    implementation 'com.trello.rxlifecycle4:rxlifecycle-android-lifecycle-kotlin:4.0.0'


    implementation 'com.jakewharton.rxbinding4:rxbinding:4.0.0'
    implementation 'com.jakewharton.rxbinding4:rxbinding-core:4.0.0'
    implementation 'com.jakewharton.rxbinding4:rxbinding-appcompat:4.0.0'

    implementation 'com.jakewharton.rxrelay3:rxrelay:3.0.0'

    implementation 'com.github.bumptech.glide:glide:4.11.0'
    kapt 'com.github.bumptech.glide:compiler:4.11.0'
    implementation "com.github.bumptech.glide:okhttp3-integration:4.11.0"

    def GLIDE_VERSION = "4.11.0"
// webpdecoder
    implementation "com.zlc.glide:webpdecoder:2.0.${GLIDE_VERSION}"

    implementation 'it.sephiroth.android.library.imagezoom:library:1.0.4'
    implementation  'com.github.Kennyc1012:MultiStateView:2.1.2'

    api "org.permissionsdispatcher:permissionsdispatcher:4.8.0"
    kapt "org.permissionsdispatcher:permissionsdispatcher-processor:4.8.0"

    implementation "com.google.android.material:material:1.2.1"

    //我的简单图片加载库
    implementation 'com.hfy.imageloader:imageloader:1.0.0'
    //BRVAH
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.2'

    //刷新加载
    implementation 'com.liaoinstan.springview:library:1.7.0'

    implementation 'in.srain.cube:ultra-ptr:1.0.11'
    implementation 'com.github.bumptech.glide:glide:4.11.0'


    compile 'com.scwang.smartrefresh:SmartRefreshLayout:1.0.4-4'
//    compile 'com.android.support:design:26.1.0'
//    compile "com.github.SibreiaDante:SiberiaDanteLib:v1.0.8"
    compile 'de.hdodenhof:circleimageview:2.1.0'
    compile 'com.jude:easyrecyclerview:4.4.2'
    compile 'me.codeboy.android:align-text-view:2.3.1'
    compile 'com.github.hackware1993:MagicIndicator:1.5.0'
    implementation 'com.jakewharton:butterknife:10.2.3'
    kapt 'com.jakewharton:butterknife-compiler:10.2.3'

    compile 'com.github.codbking:AllItemView:v1.0.0'
    compile('com.alibaba.android:vlayout:1.2.12@aar') {
        transitive = true
    }


    def version_retrofit = "2.6.0"
    def version_retrofit_gson = "2.1.0"

    implementation "com.google.code.gson:gson:2.8.6"
    implementation "com.squareup.retrofit2:converter-gson:$version_retrofit"
    implementation "com.squareup.retrofit2:retrofit:$version_retrofit_gson"

    implementation 'com.github.donkingliang:GroupedRecyclerViewAdapter:2.4.0'
}